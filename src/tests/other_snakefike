
rule all:
    input:
        expand("results/simplified/{sample}.tab",sample = SAMPLES)

rule sanger:
    input:
        expand("{path}{{sample}}.ab1", path=sanger_path)
    output:
         temp("results/fasta_files/{sample}.fasta")
    shell:
        "abiview {input} -graph none -startbase 20 -endbase 800 -osformat2 fasta -outseq {output}"
    ##############OUUUUUUUUUUUU######
    #run:
     #   record = SeqIO.parse({input}, "abi")
#        count = SeqIO.write(record,{output}, "fasta")

rule nanopore:
    input:
        expand("{path}{{sample}}.{fastq}", path=nano_path,fastq=FASTQ_EXTENSION)
    output:
        temp("results/fasta_files/{sample}.fasta")
    shell:
        "raven -t {threads} {input} > {output} "

rule illumina:
    input:
        single=expand("{path}{{sample}}.{fastq}", path=ill_path_single,fastq=FASTQ_EXTENSION),
        file_one= expand("{path}{{sample}}.{fastq}", path=ill_path_one,fastq=FASTQ_EXTENSION),
        file_two= expand("{path}{{sample}}.{fastq}", path=ill_path_two,fastq=FASTQ_EXTENSION)
    output:
        temp("results/fasta_files/{sample}.fasta")
      #  temp("results/spades")
      #  temp("results/spades/contigs.fasta")
    shell:
        "spades {input.single} --only-assembler -t {threads} -o {output}"
        "spades --pe1-1 {input.file_one} --pe1-2 {input.file_two} --only-assembler -t {threads} -o {output}"

rule fasta:
    input:
        expand("{path}{{sample}}.{fasta}", path=fasta_path,fasta=FASTA_EXTENSION)
    output:
        temp("results/fasta_files/{sample}.fasta")
    shell:
        "cp {input} {output}"

rule abricate:
    input:
        "results/fasta_files/{sample}.fasta"
    output:
        "results/all/{sample}.tab"
    shell:
        "abricate --db {db} --nopath {input} > {output}"


rule configurate:
    input:
        "results/all/{sample}.tab"
    output:
        "results/simplified/{sample}.tab"
    shell:
        "cut -f 1,5,11,9,10  {input} | sort -k 3 > {output}"

