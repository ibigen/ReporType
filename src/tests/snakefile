
######CHECK AND MAKE DB #########

db=str(input('Witch virus do you wish to study (write the whole name)? '))

def db_check (db):
    for i in shell("abricate --list", iterable=True):
        if db in i:
            check = 1
            break
        else:
            check = 0
    return (check)

check = db_check(db)
if check == 1:
    print('Database available! Starting analysis...')
else:
    print('Database not available!')
    fasta = str(input('To create the database, enter the path to the fasta file: '))
    abricate_db = str(input('Now enter the path to abricate database: '))
    print ('Creating database...')
    shell("mkdir {abricate_db}/{db}")
    shell("cp {fasta} {abricate_db}/{db}/sequences")
    shell("abricate --setupdb")
    check = db_check(db)
    if check == 1:
        print('Database available! Starting analysis...')
    else:
        print('Not possible to create a database with the given fasta file :(')


############## ANALYSIS ABRICATE ##############################

sample_path=str(input('Enter the path to the folder that contains samples to be analyzed: '))
sample_path=sample_path.replace('"',"")
sample_path=str(sample_path)


def files_path(*args):
    l = []
    for item in args:
        for p, _, files in os.walk(os.path.abspath(item)):
            for file in files:
                if file.endswith(".fasta"):
                    file=file.replace(".fasta","")
                    l.append(file)
    return l

SAMPLES=files_path(sample_path)


rule all:
    input:
        expand("results/simplified/{sample}.tab",sample = SAMPLES)

rule abricate:
    input:
        expand("{path}{{sample}}.fasta", path=sample_path)
    output:
        "results/all/{sample}.tab"
    shell:
        "abricate --db {db} {input} > {output}"


rule configurate:
    input:
        "results/all/{sample}.tab"
    output:
        "results/simplified/{sample}.tab"
    shell:
        "cut -f 5,11  {input} > {output}"


#for file in FILES
#    for line in file:
#        line = line.strip()
#        line = line.split("\t")
#        name = line[0]
#        name = name.strip()
#        name = name.split("/")
#        print("{:40s} {:40s} {:40s}".format(name[-1], line[4], line[10]))
